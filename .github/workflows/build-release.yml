name: Build and Release JAR
'on':
  workflow_dispatch: null
  push:
    branches:
      - main
    paths:
      - src/**
      - pom.xml
jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: '17'
          cache: maven
      - name: Build with Maven
        run: mvn package -DskipTests
      - name: Compute SHA1 and file size
        run: |
          JAR_FILE=$(ls target/*.jar | head -n 1)
          if [[ -z "$JAR_FILE" ]]; then
            echo "Error: No JAR file found in target/"
            exit 1
          fi
          SHA1=$(sha1sum "$JAR_FILE" | awk '{print $1}')
          SIZE=$(stat -c%s "$JAR_FILE")
          JAR_NAME=$(basename "$JAR_FILE")

          echo "SHA1=$SHA1" >> $GITHUB_ENV
          echo "SIZE=$SIZE" >> $GITHUB_ENV
          echo "JAR_NAME=$JAR_NAME" >> $GITHUB_ENV
      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: built-jar
          path: target/*.jar
      - name: Upload JSON artifact
        uses: actions/upload-artifact@v4
        with:
          name: manifest
          path: release/sigma-jello-5.1.0.json
  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Git user
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
      - name: Download built JAR
        uses: actions/download-artifact@v4
        with:
          name: built-jar
          path: target/
      - name: Download JSON artifact
        uses: actions/download-artifact@v4
        with:
          name: manifest
          path: release/
      - name: Verify JSON file exists
        run: ls -l release/
      - name: Compute SHA1 and file size again
        run: |
          JAR_FILE=$(ls target/*.jar | head -n 1)
          SHA1=$(sha1sum "$JAR_FILE" | awk '{print $1}')
          SIZE=$(stat -c%s "$JAR_FILE")

          echo "SHA1=$SHA1" >> $GITHUB_ENV
          echo "SIZE=$SIZE" >> $GITHUB_ENV
      - name: Update sigma-jello-5.1.0.json
        run: >
          JSON_FILE="release/sigma-jello-5.1.0.json"

          URL="https://github.com/Sigma-Skidder-Team/SigmaRebase/releases/download/nightly/sigma-jello-5.1.0.jar"


          jq --arg sha1 "$SHA1" --argjson size "$SIZE" --arg url "$URL" \

          '.downloads.client = { "sha1": $sha1, "size": $size, "url": $url }' \

          "$JSON_FILE" > temp.json && mv temp.json "$JSON_FILE"
      - name: Create and push tag
        run: |
          git push origin :refs/tags/nightly || true
          git tag -f nightly
          git push origin nightly
      - name: Create GitHub Release for nightly
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release delete nightly -y || true
          gh release create nightly --prerelease --title "Nightly Build" --notes "Automated nightly build"
      - name: Install GitHub CLI
        run: sudo apt-get install gh -y
      - name: Wait for GitHub to register the tag
        env:
          GH_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
        run: |
          echo "Waiting for GitHub to register the tag..."
          for i in {1..10}; do
            echo "Attempt $i..."
            RESPONSE=$(gh api repos/${{ github.repository }}/releases/tags/nightly 2>/dev/null || true)
            RELEASE_ID=$(echo "$RESPONSE" | jq -r '.id // empty')
            if [ -n "$RELEASE_ID" ]; then
              echo "Found release ID: $RELEASE_ID"
              echo "RELEASE_ID=$RELEASE_ID" >> $GITHUB_ENV
              break
            fi
            echo "Not found yet... waiting 3s"
            sleep 3
          done

          if [ -z "$RELEASE_ID" ]; then
            echo "Failed to find release ID after retries"
            exit 1
          fi
      - name: Delete existing assets from nightly release
        env:
          GH_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
        run: >
          if [ -z "$RELEASE_ID" ]; then
            echo "Failed to find release ID, skipping asset deletion"
            exit 1
          fi

          ASSETS=$(gh api repos/${{ github.repository
          }}/releases/$RELEASE_ID/assets --jq '.[].id')

          for asset_id in $ASSETS; do
            gh api --method DELETE repos/${{ github.repository }}/releases/assets/$asset_id
          done
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: nightly
          prerelease: true
          files: |
            target/*.jar
            release/sigma-jello-5.1.0.json
